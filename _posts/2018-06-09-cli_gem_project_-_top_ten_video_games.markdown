---
layout: post
title:      "CLI Gem Project - Top Ten Video Games"
date:       2018-06-09 21:21:06 +0000
permalink:  cli_gem_project_-_top_ten_video_games
---


At first, I thought that the CLI gem project was going to be extremely difficult. This would be the final project for the Object-Oriented Programming portion of the Flatiron curriculum, and I wanted to do my best. So I studied the walkthrough video extensively so that I would not start the project without a good idea of where to go. After watching the video thoroughly and absorbing every tip that Avi gave, I felt a lot better about the project. It did not seem so difficult now.

So then I thought about what my app would be, and I decided to go with a CLI that generates a top 10 list for popular video games. As a lifelong gamer and also a lover of top 10 lists, I felt that this would be the best type of app for me to create. I searched online for a website that listed video games and came upon a website called metacritic.com. It looked like the perfect website to scrape from - it listed a bunch of game properties such as genre, publisher, and platform that I could incorporate into my Game object. After finding this website, I set to work on starting to code my app.

I started by defining a halfway point milestone - the user interface would work, but it would only output "fake data" in the form of strings. I defined this milestone so that I could at least establish a working CLI. This milestone was not hard to reach - it involved defining simple methods such as #list_games and #specific_game, the latter of which incorporated a until loop containing many elsif statements. I could have used case statements, but I personally find if/elsif/else statements more managable.

So I managed to make the user interface work. It would print a list of the top 10 video games along with all their pertinent data upon the app starting up. The CLI was also able to respond to user input from gets.strip and display a url for the user to copy/paste and then go to if they typed in a specific game's number. But then came the more challenging part of the process - writing working object-oriented code and then scraping from that website. I initially wanted to create a separate file containing its own Scraper object class. But then I found that it was easier just to define the scraper as the Game object's own class method. As for creating Game objects, I initially had an #initialize method, but then I scrapped that when I realized that each new Game instance would have all of its properties (name, release date, etc.) set by the #scrape_games method anyway.

The most frustrating part of the process was finding out that my scraping method was not working. Using binding.pry, I figured out that Nokogiri was not running when the app started, so I looked up how to properly install the Nokogiri gem and require it in the right file. I made a separate config folder with an environment.rb file to contain all the requirements. I also had a separate file that contained all the lib files as "requiring relative" each other. After all of that, I was disappointed to find out that I could not scrape metacritic.com because I got a "403 forbidden Open::HTTP" error. I was dismayed that I would have to spend even more time finding a different website and rewriting all the scraping code.

However, I did not let that stop me from finishing my app. I quickly found another website that gave a list of video games, ranker.com. This one had a list of the most popular 50 video games that would repopulate every day - this was perfect because it meant the user would get a different list every day depending on how many upvotes or downvotes each game received. So I refactored my scraping code to use the new website, and after a lot of debugging, I finally got the scraping method to work! I ended up using a while loop with an index incrementor inside an #each iterator to create 10 new Game instances, set their properties, and push them into an array. The final product prints out each game's name in order from 1 to 10 and prompts the user to enter a number 1 through 10 to see more details about each game or type "exit" to quit the app. I also got rid of the many elsif statements in favor for a more condensed if statement using integers and indexes. I am satisfied with my finished product, but I know that I can always improve upon it, so I eagerly await feedback once I have my technical review.

Stay tuned for more updates on my coding journey...
